class User < ActiveRecord::Base
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> parent of 4b12111... added social login
=======
>>>>>>> parent of 4b12111... added social login
=======
>>>>>>> parent of 4b12111... added social login

>>>>>>> parent of 4b12111... added social login

  has_secure_password
  
  before_save { |user| user.email = email.downcase }
  before_save :create_remember_token
  
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX }, uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true

  has_secure_password
  
  before_save { |user| user.email = email.downcase }
  before_save :create_remember_token
  
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX }, uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true

  has_secure_password
  
  before_save { |user| user.email = email.downcase }
  before_save :create_remember_token
  
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX }, uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true

  has_secure_password
  
  before_save { |user| user.email = email.downcase }
  before_save :create_remember_token
  
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX }, uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true

  has_many :features, dependent: :destroy
  accepts_nested_attributes_for :features
  
  def working?
  	!Schedule.find_by_end_at_and_user_id(nil,id).blank?
  end

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  def self.from_omniauth(auth)
  	where(auth.slice(:provider, :uid)).first_or_create do |user|
  		user.provider = auth.provider
  		user.uid = auth.uid
  		user.name = auth.info.nickname
  	end
  end
  
  def self.new_with_session(params, session)
  	if session["devise.user_attributes"]
			new session["devise.user_attributes"] do |user|
				user.attributes = params
				user.valid?
  		end
  	else
  		super
  	end
  end
  
  def password_required?
  	super && provider.blank?
  end
  
  def update_with_password(params, *options)
  	if encrypted_password.blank?
  		update_attributes(params,*options)
  	else
  		super
  	end
  end
=======
>>>>>>> parent of 4b12111... added social login
=======
>>>>>>> parent of 4b12111... added social login
=======
>>>>>>> parent of 4b12111... added social login
=======
>>>>>>> parent of 4b12111... added social login
  
  private
  
  	def create_remember_token
  		self.remember_token = SecureRandom.urlsafe_base64
  	end
end
